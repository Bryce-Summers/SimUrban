/*! Sim Urban, a project by Bryce Summers.
 *  Single File concatenated by Grunt Concatenate on 20-12-2016
 */
/*
 * Defines the Traffic Simulation and Game namespace.
 * All Sim Urban classes are fit into this namespace.
 */
TSAG = {};

// Generated by CoffeeScript 1.11.1
(function() {
  TSAG.Set = (function() {
    function Set() {}

    Set.prototype.add = function(object) {
      console.log("ERROR: BT2D: intersectRay. This method should be overriden.");
      return false;
    };

    Set.prototype.clear = function() {};

    Set.prototype.remove = function(object) {};

    return Set;

  })();

}).call(this);

// Generated by CoffeeScript 1.11.1
(function() {
  TSAG.Mouse_Input_Controller = (function() {
    function Mouse_Input_Controller(scene, camera) {
      var h, mesh, mesh_factory, params, scale, w;
      this.scene = scene;
      this.camera = camera;
      mesh_factory = this.scene.getMeshFactory();
      params = {
        color: 0xff0000
      };
      mesh = mesh_factory.newCircle(params);
      scale = 10;
      mesh.position.z = 1;
      w = scale;
      h = scale;
      scale = mesh.scale;
      scale.x = w;
      scale.y = h;
      this.scene.add(mesh);
      this.pointer = mesh;
      this.state = "idle";
    }

    Mouse_Input_Controller.prototype.mouse_down = function(event, rightButton) {
      if (this.state === "idle") {
        this.road = new THREE.SplineCurve3([new THREE.Vector3(event.x, event.y, 0), new THREE.Vector3(event.x, event.y, 0)]);
        this.state = "building";
      } else {
        this.road.points.push(new THREE.Vector3(event.x, event.y, 0));
      }
      if (rightButton) {
        this.state = "idle";
        return this.road_obj = null;
      }
    };

    Mouse_Input_Controller.prototype.mouse_up = function(event) {};

    Mouse_Input_Controller.prototype.mouse_move = function(event) {
      var geometry, len, material, pos, screen_h, screen_w;
      pos = this.pointer.position;
      screen_w = window.innerWidth;
      screen_h = window.innerHeight;
      pos.x = event.x;
      pos.y = event.y;
      if (this.road_obj) {
        this.scene.remove(this.road_obj);
        debugger;
      }
      if (this.state === "building") {
        len = this.road.points.length;
        pos = this.road.points[len - 1];
        pos.x = event.x;
        pos.y = event.y;
        geometry = new THREE.Geometry();
        geometry.vertices = this.road.getPoints(500);
        material = new THREE.LineBasicMaterial({
          color: 0x000000
        });
        this.road_obj = new THREE.Line(geometry, material);
        return this.scene.add(this.road_obj);
      }
    };

    return Mouse_Input_Controller;

  })();

}).call(this);

// Generated by CoffeeScript 1.11.1

/*
    Super class to mesh construction classes.

    Written by Bryce Summers on 11/22/2016.
    
    Purpose:
        Deals with all of the common problems such as adding a material and changing its color.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.Mesh_Basic = (function(superClass) {
    extend(Mesh_Basic, superClass);

    function Mesh_Basic(area_geometry, outline_geometry) {
      var material;
      this.outline_geometry = outline_geometry;
      material = new THREE.MeshBasicMaterial({
        color: 0xaaaaaa,
        side: THREE.DoubleSide
      });
      Mesh_Basic.__super__.constructor.call(this, area_geometry, material);
      this.line_material = new THREE.LineBasicMaterial({
        color: 0x000000,
        linewidth: 5
      });
    }

    Mesh_Basic.prototype.clone = function(params) {
      var mesh, outline, output;
      output = new THREE.Object3D();
      mesh = new TSAG.Mesh_Basic(this.geometry);
      outline = new THREE.Line(this.outline_geometry, this.line_material);
      outline.renderOrder = 1;
      output.add(mesh);
      output.add(outline);
      mesh.material.color = new THREE.Color(params.color);
      return output;
    };

    return Mesh_Basic;

  })(THREE.Mesh);

}).call(this);

// Generated by CoffeeScript 1.11.1
(function() {
  TSAG.Unit_Meshes = (function() {
    function Unit_Meshes() {
      this._square = new TSAG.Mesh_Unit_Square();
      this._circle = new TSAG.Mesh_Unit_Circle();
    }

    Unit_Meshes.prototype.newSquare = function(params) {
      return this._square.clone(params);
    };

    Unit_Meshes.prototype.newCircle = function(params) {
      return this._circle.clone(params);
    };

    return Unit_Meshes;

  })();

}).call(this);

// Generated by CoffeeScript 1.11.1

/*
    Random Scene.
    Written by Bryce on 11/22/2016
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.Random_Scene = (function(superClass) {
    extend(Random_Scene, superClass);

    function Random_Scene(scene_width, scene_height) {
      var h, i, j, mesh, pos, rotation, scale, w, x, y;
      Random_Scene.__super__.constructor.call(this);
      this._scale = 40;
      this._padding = 30;
      this._Mesh_Factory = new TSAG.Unit_Meshes();
      for (i = j = 0; j <= 10; i = ++j) {
        mesh = this._Mesh_Factory.newSquare({
          color: 0xaaaaaa
        });
        x = this._padding + Math.random() * (scene_width - this._padding * 2);
        y = this._padding + Math.random() * (scene_height - this._padding * 2);
        w = this._scale;
        h = this._scale;
        pos = mesh.position;
        pos.x = x;
        pos.y = y;
        scale = mesh.scale;
        scale.x = w;
        scale.y = h;
        rotation = mesh.rotation;
        rotation.z = Math.random() * Math.PI / 2;
        this.add(mesh);
      }
      return;
    }

    Random_Scene.prototype.getMeshFactory = function() {
      return this._Mesh_Factory;
    };

    return Random_Scene;

  })(THREE.Scene);

}).call(this);

// Generated by CoffeeScript 1.11.1

/*
    Circle Mesh.

    Initializes as a unit square at the origin.

    Written by Bryce Summers on 11/22/2016.
    
    Purpose:
     - Provides a unit square that can then be scaled, positioned, and rotated.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.Mesh_Unit_Circle = (function(superClass) {
    extend(Mesh_Unit_Circle, superClass);

    function Mesh_Unit_Circle() {
      var geometry, outline, radius, segments, theata0, theata1;
      radius = .5;
      segments = 25;
      theata0 = 0;
      theata1 = Math.PI * 2;
      geometry = new THREE.CircleBufferGeometry(.5, 25, theata0, theata1);
      outline = new THREE.Geometry();

      /*
      outline.vertices.push(
          new THREE.Vector3( -.5, -.5, 0 ),
          new THREE.Vector3(  .5, -.5, 0 ),
          new THREE.Vector3(  .5,  .5, 0 ),
          new THREE.Vector3( -.5,  .5, 0 ),
          new THREE.Vector3( -.5, -.5, 0 ) # Closed.
      );
       */
      Mesh_Unit_Circle.__super__.constructor.call(this, geometry, outline);
    }

    return Mesh_Unit_Circle;

  })(TSAG.Mesh_Basic);

}).call(this);

// Generated by CoffeeScript 1.11.1

/*
    Square Mesh.

    Initializes as a unit square at the origin.

    Written by Bryce Summers on 11/22/2016.
    
    Purpose:
     - Provides a unit square that can then be scaled, positioned, and rotated.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.Mesh_Unit_Square = (function(superClass) {
    extend(Mesh_Unit_Square, superClass);

    function Mesh_Unit_Square() {
      var geometry, outline;
      geometry = new THREE.PlaneBufferGeometry(1, 1);
      outline = new THREE.Geometry();
      outline.vertices.push(new THREE.Vector3(-.5, -.5, 0), new THREE.Vector3(.5, -.5, 0), new THREE.Vector3(.5, .5, 0), new THREE.Vector3(-.5, .5, 0), new THREE.Vector3(-.5, -.5, 0));
      Mesh_Unit_Square.__super__.constructor.call(this, geometry, outline);
    }

    return Mesh_Unit_Square;

  })(TSAG.Mesh_Basic);

}).call(this);

/*
 * Entry Point to my Transportation Simulation Game.
 * Sets up THREE.js on the DOM and sets up input from the browser.
 * Written by Bryce Summers on 11/22/2016
 */

var renderer;
var root_scene;
var root_camera;
var mouse_input;

function init()
{
    // Scene Graph.
    root_scene = new TSAG.Random_Scene(window.innerWidth, window.innerHeight);

    // Camera.
    var dim = {x:0, y:0, w:window.innerWidth, h:innerHeight, padding:10};
    root_camera = new THREE.OrthographicCamera( dim.x - dim.w/2, dim.x + dim.w/2, dim.y - dim.h/2, dim.y + dim.h/2, 1, 1000 );
    root_camera.position.z = 2;

    var x = dim.x + dim.w/2;
    var y = dim.y + dim.h/2;
    root_camera.position.x = x;
    root_camera.position.y = y;

    root_camera.lookAt(new THREE.Vector3(x, y, 0))


    // Renderer.
    var params = {
        antialias: true,
    };
    
    init_renderer(params);

    // Clear to white Background.
    renderer.setClearColor( 0xffffff );
    renderer.anti

    init_input();
}

function init_renderer(params)
{
    var container = document.getElementById( 'container' );
    renderer = new THREE.WebGLRenderer(params);
    renderer.setPixelRatio( window.devicePixelRatio );
    container.appendChild( renderer.domElement );
    // Set the render based on the size of the window.
    onWindowResize();
}

function init_input()
{
    mouse_input = new TSAG.Mouse_Input_Controller(root_scene, root_camera);

    window.addEventListener( 'resize', onWindowResize, false);

    //window.addEventListener("keypress", onKeyPress);
    window.addEventListener("keydown", onKeyPress);

    window.addEventListener("mousemove", onMouseMove);
    window.addEventListener("mousedown", onMouseDown);
    window.addEventListener("mouseup",   onMouseUp);
}


// Events.
function onWindowResize( event )
{
    renderer.setSize( window.innerWidth, window.innerHeight );
}

// FIXME: ReWire these input events.
function onKeyPress( event )
{
    // Key codes for event.which.
    var LEFT  = 37
    var RIGHT = 39
    
    
}

function onMouseMove( event )
{
    mouse_input.mouse_move(event);
}

function onMouseDown( e )//event
{
    //http://stackoverflow.com/questions/2405771/is-right-click-a-javascript-event
    var isRightMB;
    e = e || window.event;

    if ("which" in e)  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera
        isRightMB = e.which == 3; 
    else if ("button" in e)  // IE, Opera 
        isRightMB = e.button == 2; 

    mouse_input.mouse_down(e, isRightMB);
}

function onMouseUp( event )
{
    mouse_input.mouse_up(event);
}

function animate() {

    requestAnimationFrame( animate );
    render();

}

function render() {

    renderer.render(root_scene, root_camera);
}

init();
animate();