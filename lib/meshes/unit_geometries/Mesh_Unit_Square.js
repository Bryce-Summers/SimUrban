// Generated by CoffeeScript 1.11.1

/*
    Square Mesh.

    Initializes as a unit square at the origin.

    Written by Bryce Summers on 11/22/2016.
    
    Purpose:
     - Provides a unit square that can then be scaled, positioned, and rotated.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.Mesh_Unit_Square = (function(superClass) {
    extend(Mesh_Unit_Square, superClass);

    function Mesh_Unit_Square() {
      var geometry, outline;
      geometry = new THREE.PlaneGeometry(1, 1);
      outline = new THREE.Geometry();
      outline.vertices.push(new THREE.Vector3(-.5, -.5, 0), new THREE.Vector3(.5, -.5, 0), new THREE.Vector3(.5, .5, 0), new THREE.Vector3(-.5, .5, 0), new THREE.Vector3(-.5, -.5, 0));
      Mesh_Unit_Square.__super__.constructor.call(this, geometry, outline);
    }


    /*
    setup_texture_coordinates: () ->
        @geometry.faceVertexUvs.push(uv_coords)
    
        s = 1
    
        v1 = new THREE.Vector2(0, 0)
        v2 = new THREE.Vector2(s, 0)
        v3 = new THREE.Vector2(s, s)
        v4 = new THREE.Vector2(0, s)
    
        uv_coords.push([v1, v2, v3])
        uv_coords.push([v1, v3, v4])
    
        @geometry.uvsNeedUpdate = true
    
        @geometry.computeBoundingSphere()
    
        @geometry.computeFaceNormals()
        @geometry.computeVertexNormals()
        
        @geometry.verticesNeedUpdate = true
                
         * Changes to Vertex normals.
        @geometry.normalsNeedUpdate = true
        @geometry.colorsNeedUpdate = true
     */

    return Mesh_Unit_Square;

  })(TSAG.Mesh_Basic);

}).call(this);

//# sourceMappingURL=Mesh_Unit_Square.js.map
