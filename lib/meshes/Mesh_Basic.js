// Generated by CoffeeScript 1.11.1

/*
    Super class to mesh construction classes.

    Written by Bryce Summers on 11/22/2016.
    
    Purpose:
        Deals with all of the common problems such as adding a material and changing its color.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EX.Mesh_Basic = (function(superClass) {
    extend(Mesh_Basic, superClass);

    function Mesh_Basic(area_geometry, outline_geometry) {
      this.outline_geometry = outline_geometry;
      this.fill_material = EX.style.m_default_fill.clone();
      Mesh_Basic.__super__.constructor.call(this, area_geometry, this.fill_material);
      this.line_material = EX.style.m_default_line.clone();
    }

    Mesh_Basic.prototype.clone = function(params) {
      var mesh, outline, output;
      output = new THREE.Object3D();
      mesh = new EX.Mesh_Basic(this.geometry);
      outline = new THREE.Line(this.outline_geometry, this.line_material);
      outline.renderOrder = 1;
      output.add(mesh);
      output.add(outline);
      if (params.material) {
        mesh.material = params.material;
      }
      if (params.color) {
        if (!(params.color instanceof THREE.Color)) {
          debugger;
        }
        mesh.material.color = params.color;
      }
      output.setFillColor = function(c) {
        return this.children[0].material.color = c;
      };
      output.revertFillColor = function() {
        return this.children[0].material.color = EX.style.m_default_fill.color.clone();
      };
      return output;
    };

    return Mesh_Basic;

  })(THREE.Mesh);

}).call(this);
