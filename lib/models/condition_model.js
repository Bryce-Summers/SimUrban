// Generated by CoffeeScript 1.11.1

/*
    Written by Bryce Summers on 10.23.2017

    Conditional models allow either accept or reject a given object model depending
    this conditional model's prediated test configuration.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.Condition_Model = (function(superClass) {
    extend(Condition_Model, superClass);

    Condition_Model.EQ = "=";

    Condition_Model.LE = "<=";

    Condition_Model.GE = ">=";

    Condition_Model.LT = "<";

    Condition_Model.GT = ">";

    Condition_Model.NE = "!=";

    Condition_Model.VAR = 0;

    Condition_Model.CONSTANT = 1;

    function Condition_Model(key1, type1, operator, key2, type2) {
      this.key1 = key1;
      this.type1 = type1;
      this.operator = operator;
      this.key2 = key2;
      this.type2 = type2;
    }

    Condition_Model.prototype.buildModel = function() {};

    Condition_Model.prototype.evaluateObject = function(obj) {
      var val1, val2;
      if (this.type1 === TSAG.Condition_Model.VAR) {
        val1 = obj.lookup(this.key1);
      } else {
        val1 = this.key1;
      }
      if (this.type2 === TSAG.Condition_Model.VAR) {
        val2 = obj.lookupKey(this.key2);
      } else {
        val2 = this.key2;
      }
      switch (this.operator) {
        case TSAG.Condition_Model.EQ:
          return val1 === val2;
        case TSAG.Condition_Model.LE:
          return val1 <= val2;
        case TSAG.Condition_Model.GE:
          return val1 >= val2;
        case TSAG.Condition_Model.LT:
          return val1 < val2;
        case TSAG.Condition_Model.GT:
          return val1 > val2;
        case TSAG.Condition_Model.NE:
          return val1 !== val2;
        default:
          return console.log("Conditional: " + this.operator + " is not defined.");
      }
    };

    return Condition_Model;

  })(TSAG.Model);

}).call(this);
