// Generated by CoffeeScript 1.11.1

/*
    SimUrban Scene Object.
    Rewritten by Bryce Summers on 10.23.2017
    
    purpose: Organizes my algorithm authoring document system.
             This is the root node of all game initialization, storage, and references.

    NOTE: Objects and places are indistinguishable, except that objects are meant to be temporary,
        whereas places are meant to be eternal.
        Places may spawn objects.
 */

(function() {
  TSAG.Scene = (function() {
    function Scene() {
      this.view = new THREE.Scene();
      this._view_levels = null;
      this._io_root = null;
      this.init();
    }

    Scene.prototype.init = function() {
      var i, j, level, results;
      this._objects = new Set();
      this._active_objects = new Set();
      this._places = new Set();
      this._active_places = new Set();
      this._view_levels = [];
      results = [];
      for (i = j = 1; j < 10; i = ++j) {
        level = new THREE.Object3D();
        view.position.z = 1.0 / 10 * i;
        this._view_levels.push(view);
        results.push(this.view.add(level));
      }
      return results;
    };

    Scene.prototype.setViewToPlace = function(place) {
      var j, len, level, ref;
      ref = this._view_levels;
      for (j = 0, len = ref.length; j < len; j++) {
        level = ref[j];
        level.clear();
      }
      return place.populateViewLevels(this._view_levels, 10);
    };

    Scene.prototype.setInputRoot = function(io_root) {
      var view;
      this._io_root = io_root;
      this._io_mouse_main = this._io_root.getMouseController();
      view = this.getVisual();
      this._ui = new TSAG.E_UI_Game(this);
      return view.add(this._ui.getVisual());
    };

    Scene.prototype.update = function(dt) {
      this._active_objects.forEach((function(_this) {
        return function(obj_model) {
          return obj_model.update(dt);
        };
      })(this));
    };

    Scene.prototype.activateObject = function(obj_model) {
      this._active_objects.add(obj_model);
    };

    Scene.prototype.deactivateObject = function(obj_model) {
      this._active_objects["delete"](obj_model);
    };

    Scene.prototype.newObject = function(obj_model) {
      this._objects.add(obj_model);
    };

    Scene.prototype.destroyObject = function(obj_model) {
      this._objects["delete"](obj_model);
    };

    Scene.prototype.activatePlace = function(model) {
      return this._active_places.add(model);
    };

    Scene.prototype.deactivatePlace = function(model) {
      return this._active_places["delete"](model);
    };

    Scene.prototype.addPlace = function(model) {
      return this._places.add(model);
    };

    Scene.prototype.deletePlace = function(model) {
      return this._places["delete"](model);
    };

    return Scene;

  })();

}).call(this);
