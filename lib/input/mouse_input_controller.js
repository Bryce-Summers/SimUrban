// Generated by CoffeeScript 1.11.1
(function() {
  TSAG.Mouse_Input_Controller = (function() {
    function Mouse_Input_Controller(scene, camera) {
      var h, mesh, mesh_factory, params, scale, w;
      this.scene = scene;
      this.camera = camera;
      mesh_factory = this.scene.getMeshFactory();
      params = {
        color: 0xff0000
      };
      mesh = mesh_factory.newCircle(params);
      scale = 10;
      mesh.position.z = 1;
      w = scale;
      h = scale;
      scale = mesh.scale;
      scale.x = w;
      scale.y = h;
      this.scene.add(mesh);
      this.pointer = mesh;
      this.state = "idle";
      this._mousePrevious = {
        x: 0,
        y: 0
      };
      this._min_dist = 10;
    }

    Mouse_Input_Controller.prototype.mouse_down = function(event, rightButton) {
      var dist, intersection, mesh, pos, results;
      results = this.scene.queryPoint(event.x, event.y);
      console.log(event.x, event.y);
      if (results !== null) {
        mesh = results[0];
        intersection = results[1];
        mesh.material.color.set(0xff0000);
      }
      return;
      if (rightButton) {
        return;
      }
      if (this.state === "idle") {
        this.road = new TSAG.Curve();
        this.road.addPoint(new THREE.Vector3(event.x, event.y, 0));
        this.road.addPoint(new THREE.Vector3(event.x, event.y + 1, 0));
        this.state = "building";
        this._mousePrevious.x = event.x;
        return this._mousePrevious.y = event.y;
      } else {
        dist = TSAG.Math.distance(event.x, event.y, this._mousePrevious.x, this._mousePrevious.y);
        if (dist > this._min_dist) {
          pos = this.road.getLastPoint();
          pos.x = Math.floor(pos.x);
          pos.y = Math.floor(pos.y);
          this.road.addPoint(new THREE.Vector3(event.x + .01, event.y + .01, 0));
          this._mousePrevious.x = event.x;
          return this._mousePrevious.y = event.y;
        } else {
          this.road.removeLastPoint();
          this.state = "idle";
          return this.road_obj = null;
        }
      }

      /*
      if rightButton
          @state = "idle"
           * Preserve the Road object.
          @road_obj = null
       */
    };

    Mouse_Input_Controller.prototype.mouse_up = function(event) {};

    Mouse_Input_Controller.prototype.mouse_move = function(event) {
      var intersection, left_line, len, material, max_length, mesh, middle_line, middle_material, offset_amount, pos, results, right_line, screen_h, screen_w;
      pos = this.pointer.position;
      pos.x = event.x;
      pos.y = event.y;
      results = this.scene.queryPoint(event.x, event.y);
      console.log(event.x, event.y);
      if (results !== null) {
        mesh = results[0];
        intersection = results[1];
        mesh.material.color.set(0xff0000);
      }
      return;
      screen_w = window.innerWidth;
      screen_h = window.innerHeight;
      if (this.road_obj) {
        this.scene.remove(this.road_obj);
      }
      if (this.state === "building") {
        len = this.road.numPoints();
        pos = this.road.getPointAtIndex(len - 1);
        pos.x = event.x + .01;
        pos.y = event.y + .01;
        max_length = 10;
        offset_amount = 10;
        this.road.updateDiscretization(10);
        this.road_obj = new THREE.Object3D();
        material = new THREE.LineBasicMaterial({
          color: 0x000000
        });
        middle_material = new THREE.LineBasicMaterial({
          color: 0x514802
        });
        middle_line = new THREE.Geometry();
        middle_line.vertices = this.road.getDiscretization();
        this.road_obj.add(new THREE.Line(middle_line, middle_material));
        left_line = new THREE.Geometry();
        left_line.vertices = this.road.getOffsets(max_length, offset_amount);
        this.road_obj.add(new THREE.Line(left_line, material));
        right_line = new THREE.Geometry();
        right_line.vertices = this.road.getOffsets(max_length, -offset_amount);
        this.road_obj.add(new THREE.Line(right_line, material));
        return this.scene.add(this.road_obj);
      }
    };

    return Mouse_Input_Controller;

  })();

}).call(this);
