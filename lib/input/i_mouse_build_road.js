// Generated by CoffeeScript 1.11.1
(function() {
  TSAG.I_Mouse_Build_Road = (function() {
    function I_Mouse_Build_Road(e_scene, camera) {
      this.e_scene = e_scene;
      this.camera = camera;
      this.state = "idle";
      this._mousePrevious = {
        x: 0,
        y: 0
      };
      this._min_dist = TSAG.style.user_input_min_move;
      this.road = null;
      this.next_point = null;
    }

    I_Mouse_Build_Road.prototype.mouse_down = function(event) {
      var dist, max_length, pos;
      if (this.state === "idle") {
        this.network = this.e_scene.getNetwork();
        this.road = this.network.newRoad(event.x, event.y);
        this.road.addPoint(new THREE.Vector3(event.x, event.y, 0));
        this.next_point = new THREE.Vector3(event.x, event.y + 1, 0);
        this.road.addPoint(this.next_point);
        this.state = "building";
        this._mousePrevious.x = event.x;
        return this._mousePrevious.y = event.y;
      } else {
        dist = TSAG.Math.distance(event.x, event.y, this._mousePrevious.x, this._mousePrevious.y);
        if (dist > this._min_dist) {
          pos = this.next_point;
          pos.x = Math.floor(pos.x);
          pos.y = Math.floor(pos.y);
          this.next_point = new THREE.Vector3(event.x + .01, event.y + .01, 0);
          this.road.addPoint(this.next_point);
          this._mousePrevious.x = event.x;
          return this._mousePrevious.y = event.y;
        } else {
          this.road.removeLastPoint();
          this.state = "idle";
          max_length = TSAG.style.discretization_length;
          this.road.updateDiscretization(max_length);
          return this.road = null;
        }
      }
    };

    I_Mouse_Build_Road.prototype.mouse_up = function(event) {};

    I_Mouse_Build_Road.prototype.mouse_move = function(event) {
      var max_length, road_model;
      if (this.state === "building") {
        this.next_point.x = event.x + .01;
        this.next_point.y = event.y + .01;
        max_length = TSAG.style.discretization_length;
        this.road.updateDiscretization(max_length);
        road_model = this.network.query_road(event.x, event.y);
        if (road_model !== null) {
          return this.network.newIntersection(road_model.getPosition());
        }
      }
    };

    return I_Mouse_Build_Road;

  })();

}).call(this);
