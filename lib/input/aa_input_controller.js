// Generated by CoffeeScript 1.11.1

/*

Top down Input Controller class.
Specifies an aggregated controller.

Written by Bryce Summers on 1 - 31 - 2017.

FIXME: Allow people to toggle certain sub-controllers on and off.
 */

(function() {
  TSAG.Input_Controller = (function() {
    function Input_Controller() {
      this._mouse_input_controllers = [];
      this._keyboard_input_controllers = [];
      this._time_input_controllers = [];
      this._system_controllers = [];
      this.time_on = false;
    }

    Input_Controller.prototype.add_universal_controller = function(controller) {
      this._mouse_input_controllers.push(controller);
      this._keyboard_input_controllers.push(controller);
      this._time_input_controllers.push(controller);
      this._system_controllers.push(controller);
    };

    Input_Controller.prototype.add_mouse_input_controller = function(controller) {
      this._mouse_input_controllers.push(controller);
    };

    Input_Controller.prototype.add_keyboard_input_controller = function(controller) {
      this._keyboard_input_controllers.push(controller);
    };

    Input_Controller.prototype.add_time_input_controller = function(controller) {
      this._time_input_controllers.push(controller);
    };

    Input_Controller.prototype.add_system_controller = function(controller) {
      this._system_controllers.push(controller);
    };

    Input_Controller.prototype.mouse_down = function(event) {
      var controller, i, j, len, ref;
      len = this._mouse_input_controllers.length;
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        controller = this._mouse_input_controllers[i];
        controller.mouse_down(event);
      }
    };

    Input_Controller.prototype.mouse_up = function(event) {
      var controller, i, j, len, ref;
      len = this._mouse_input_controllers.length;
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        controller = this._mouse_input_controllers[i];
        controller.mouse_up(event);
      }
    };

    Input_Controller.prototype.mouse_move = function(event) {
      var controller, i, j, len, ref;
      len = this._mouse_input_controllers.length;
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        controller = this._mouse_input_controllers[i];
        controller.mouse_move(event);
      }
    };

    Input_Controller.prototype.time = function(dt) {
      var controller, i, j, len, ref;
      len = this._time_input_controllers.length;
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        controller = this._time_input_controllers[i];
        controller.time(dt);
      }
    };

    Input_Controller.prototype.window_resize = function(event) {
      var controller, i, j, len, ref;
      len = this._system_controllers.length;
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        controller = this._system_controllers[i];
        controller.window_resize();
      }
    };

    return Input_Controller;

  })();

}).call(this);

//# sourceMappingURL=aa_input_controller.js.map
