// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.I_Mouse_Stats_Overlays = (function(superClass) {
    extend(I_Mouse_Stats_Overlays, superClass);

    function I_Mouse_Stats_Overlays(scene, camera) {
      this.scene = scene;
      this.camera = camera;
      I_Mouse_Stats_Overlays.__super__.constructor.call(this, this.scene, this.camera);
      this.overlays = this.scene.getOverlays();
      this.view = this.overlays.getVisual();
      this.network = this.scene.getNetwork();
      this.previous_elements = [];
    }

    I_Mouse_Stats_Overlays.prototype.isIdle = function() {
      return true;
    };

    I_Mouse_Stats_Overlays.prototype.finish = function() {
      var prev_elem, results;
      results = [];
      while (this.previous_elements.length > 0) {
        prev_elem = this.previous_elements.pop();
        results.push(prev_elem.hide_stats(this.view));
      }
      return results;
    };

    I_Mouse_Stats_Overlays.prototype.mouse_down = function(event) {
      if (this.previous_elements.length > 0) {

        /*
        @network.removeVisual(@previous_element.getVisual())
        @network.removeCollisionPolygon(@previous_element.getCollisionPolygon())
        #@network.removeTopology
         */
      }
    };

    I_Mouse_Stats_Overlays.prototype.mouse_up = function(event) {};

    I_Mouse_Stats_Overlays.prototype.mouse_move = function(event) {
      var elem;
      this.finish();
      elem = this.network.query_area_elements_pt(new BDS.Point(event.x, event.y));
      if (elem !== null) {
        elem.display_stats(this.view);
        return this.previous_elements.push(elem);
      }
    };

    return I_Mouse_Stats_Overlays;

  })(TSAG.I_Tool_Controller);

}).call(this);
