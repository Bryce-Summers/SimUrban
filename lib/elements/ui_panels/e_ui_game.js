// Generated by CoffeeScript 1.11.1

/*
    SimUrban Game User Interface.
    Written by Bryce on 4.30.2017
    
    Purpose: This class represents the particular state for the game's ui in its main gameplay state,
        - includes side buttons on the left of the screen.
        - Statistical displays on the bottom of the screen.
        - Messages.

        This class also handles the text based display of information to the users.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.E_UI_Game = (function(superClass) {
    extend(E_UI_Game, superClass);

    function E_UI_Game(scene) {
      this.scene = scene;
      E_UI_Game.__super__.constructor.call(this, this.scene);
      this.createButtons();
      this.createStaticObjects();
      this.changeMessageText("Default Message");
    }

    E_UI_Game.prototype.createButtons = function() {
      var dim_highlight_button, dim_road_button, dim_stats_button, func_build_road, func_highlight, func_stats, pline_highlight_button, pline_road_button, pline_stats_button, view;
      this.mouse_controller = this.scene.get_io_mouse();
      this.controller_build_road = this.mouse_controller.getRoadBuild();
      this.controller_build_road.setActive(false);

      /*
      @controller_demolish_road = mouse_controller.getRoadDestroy()
      @controller_demolish_road.setActive(false)
       */
      this.controller_highlight = mouse_controller.getHighlight();
      this.controller_highlight.setActive(false);
      this.controller_stats = mouse_controller.getStats();
      this.controller_stats.setActive(false);
      view = this.getVisual();
      dim_road_button = {
        x: 16,
        y: 32,
        w: 64,
        h: 64
      };
      this.img_road_button = TSAG.style.newSprite("images/road.png", dim_road_button);
      view.add(this.img_road_button);
      dim_stats_button = {
        x: 16,
        y: 96,
        w: 64,
        h: 64
      };
      this.img_stats_button = TSAG.style.newSprite("images/stats.png", dim_stats_button);
      view.add(this.img_stats_button);
      dim_highlight_button = {
        x: 16,
        y: 160,
        w: 64,
        h: 64
      };
      this.img_highlight_button = TSAG.style.newSprite("images/stats.png", dim_stats_button);
      view.add(this.img_stats_button);
      pline_road_button = BDS.Polyline.newRectangle(dim_road_button);
      pline_stats_button = BDS.Polyline.newRectangle(dim_stats_button);
      pline_highlight_button = BDS.Polyline.newRectangle(dim_highlight_button);

      /*
       * Future road type selection
      func_build_road_local     = () ->
          mode = TSAG.I_Mouse_Build_Road.mode_local
          @controller_build_road.setMode(mode)
      
      func_build_road_collector = () ->
          mode = TSAG.I_Mouse_Build_Road.mode_collector
          @controller_build_road.setMode(mode)
      
      func_build_road_artery    = () ->
          mode = TSAG.I_Mouse_Build_Road.mode_artery
          @controller_build_road.setMode(mode)
       */
      func_build_road = function() {
        this.mouse_controller.deactivateTools();
        return this.controller_build_road.setActive(true);
      };
      func_stats = function() {
        this.mouse_controller.deactivateTools();
        return this.controller_build_road.setActive(true);
      };
      func_highlight = function() {
        this.mouse_controller.deactivateTools();
        return this.controller_highlight.setActive(true);
      };
      this.createButton(pline_road_button, this.img_road_button.material, func_build_road);
      this.createButton(pline_stats_button, this.img_stats_button.material, func_stats);
      return this.createButton(pline_highlight_button, this.img_highlight_button.material, func_highlight);
    };

    E_UI_Game.prototype.createStaticObjects = function() {
      var bottom_border, cost_display, happiness_display, img_happy_label, img_sad_label, left_border, sadness_display, view;
      view = this.getVisual();
      left_border = this._createRectangle({
        fill: 0x808080,
        x: 0,
        y: 0,
        w: 96,
        h: 800,
        depth: -7
      });
      view.add(left_border);
      this.img_cost_label = TSAG.style.newSprite("images/cost.png", {
        x: 0,
        y: 704,
        w: 96,
        h: 96
      });
      view.add(this.img_cost_label);
      bottom_border = this._createRectangle({
        fill: 0x808080,
        x: 0,
        y: 800 - 16,
        w: 1200,
        h: 16,
        depth: -6
      });
      view.add(bottom_border);
      cost_display = this._createRectangle({
        fill: 0xffffff,
        x: 64,
        y: 800 - 16 - 50,
        w: 256,
        h: 50,
        depth: -5
      });
      view.add(cost_display);
      this.info_message_display = this._createRectangle({
        fill: 0x0000ff,
        x: 64 + 256,
        y: 800 - 66,
        w: 520,
        h: 66,
        depth: -5
      });
      view.add(this.info_message_display);
      this.info_message_text = new THREE.Object3D();
      this.info_message_text.position.x = 335;
      this.info_message_text.position.y = 800 - 60;
      view.add(this.info_message_text);
      img_happy_label = TSAG.style.newSprite("images/happy_face.png", {
        x: 830,
        y: 800 - 96,
        w: 96,
        h: 96
      });
      view.add(img_happy_label);
      img_sad_label = TSAG.style.newSprite("images/sad_face.png", {
        x: 1200 - 96,
        y: 800 - 96,
        w: 96,
        h: 96
      });
      view.add(img_sad_label);
      happiness_display = this._createRectangle({
        fill: 0xb0efcd,
        x: 900,
        y: 800 - 66,
        w: 154,
        h: 50,
        depth: -5
      });
      view.add(happiness_display);
      sadness_display = this._createRectangle({
        fill: 0xeec3c3,
        x: 1058,
        y: 800 - 66,
        w: 60,
        h: 50,
        depth: -5
      });
      return view.add(sadness_display);
    };


    /*
    
    Interface Routines. - What can the ui do?
     */

    E_UI_Game.prototype.message = function(str, params) {
      if (params.type === 'info') {
        this.info_message_display.revertFillColor();
        if (params.element) {
          params.element.revertFillColor();
        }
      }
      if (params.type === 'action') {
        this.info_message_display.setFillColor(TSAG.style.action);
        if (params.element) {
          params.element.setFillColor(TSAG.style.action);
        }
      } else if (params.type === 'error') {
        this.info_message_display.setFillColor(TSAG.style.error);
        if (params.element) {
          params.element.setFillColor(TSAG.style.error);
        }
      }
      return this.changeMessageText(str);
    };

    E_UI_Game.prototype.changeMessageText = function(str) {
      this.info_message_text.children = [];
      return TSAG.style.newText({
        font: TSAG.style.font,
        height: 16,
        fill_color: 0xff000000,
        message: str,
        out: this.info_message_text
      });
    };

    E_UI_Game.prototype.flash = function() {
      return this.info_message_display.setFillColor(TSAG.style.highlight);
    };

    return E_UI_Game;

  })(TSAG.E_UI);

}).call(this);
