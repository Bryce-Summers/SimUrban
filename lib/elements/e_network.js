// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.E_Network = (function(superClass) {
    extend(E_Network, superClass);

    function E_Network() {
      E_Network.__super__.constructor.call(this);
      this._bvh_needs_update = true;
      this._bvh = null;
      this._network_topology = new TSAG.S_Network_Topology();
      this._intersections = [];
      this._roads = [];
    }

    E_Network.prototype.newRoad = function(x, y) {
      var edge, intersection, road, vertex, visual;
      this._BVH = new TSAG.S_AABVH(this.getVisual(), {
        val: 'x',
        dim: 2
      });
      intersection = this.newIntersection(x, y);
      vertex = intersection.getVertex();
      edge = this._network_topology.newEdge();
      edge.setStartVert(vertex);
      road = new TSAG.E_Road(edge);
      edge.setElement(road);
      this._roads.push(road);
      visual = this.getVisual();
      visual.add(road.getVisual());
      return road;
    };

    E_Network.prototype.newIntersection = function(x, y) {
      var intersection, position, vertex, visual;
      this._BVH = new TSAG.S_AABVH(this.getVisual(), {
        val: 'x',
        dim: 2
      });
      vertex = this._network_topology.newVertex();
      position = new THREE.Vector3(x, y, 0);
      intersection = new TSAG.E_Intersection(vertex, position);
      vertex.setElement(intersection);
      this._intersections.push(intersection);
      visual = this.getVisual();
      visual.add(intersection.getVisual());
      return intersection;
    };

    E_Network.prototype.query_road = function(x, y) {
      var element, model, triangle;
      triangle = this._BVH.query_point(x, y);
      if (triangle === null) {
        return null;
      }
      triangle.mesh.material.color = new THREE.Color(Math.random(), Math.random(), Math.random());
      model = triangle.model;
      element = triangle.mesh.element;
      if (element instanceof TSAG.E_Intersection) {
        return null;
      }
      if (model instanceof TSAG.M_Road) {
        return model;
      }
      return null;
    };

    return E_Network;

  })(TSAG.E_Super);

}).call(this);
