// Generated by CoffeeScript 1.11.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.E_Network = (function(superClass) {
    extend(E_Network, superClass);

    function E_Network() {
      var graph;
      E_Network.__super__.constructor.call(this);
      this._topology_generator = new TSAG.PolylineGraphGenerator();
      graph = this._topology_generator.allocateGraph();
      this._topology_linker = new SCRIB.TopologyLinker(this._topology_generator, graph);
      this.setTopology(graph);
      this._roads = [];
    }

    E_Network.prototype.addRoad = function(road) {
      return this._roads.push(road);
    };

    E_Network.prototype.getRoads = function() {
      return this._roads;
    };

    E_Network.prototype.getGenerator = function() {
      return this._topology_generator;
    };

    E_Network.prototype.getLinker = function() {
      return this._topology_linker;
    };

    E_Network.prototype.query_elements_pt = function(x, y) {
      var elements, i, len, polyline, polylines;
      polylines = this._bvh.query_point_all(new BDS.Point(x, y));
      elements = [];
      for (i = 0, len = polylines.length; i < len; i++) {
        polyline = polylines[i];
        elements.push(polyline.getAssociatedData());
      }
      return elements;
    };

    E_Network.prototype.query_elements_box = function(box) {
      var elements, i, len, polyline, polylines;
      polylines = this._bvh.query_box_all(box);
      elements = [];
      for (i = 0, len = polylines.length; i < len; i++) {
        polyline = polylines[i];
        elements.push(polyline.getAssociatedData());
      }
      return elements;
    };

    return E_Network;

  })(TSAG.E_Super);

}).call(this);
