// Generated by CoffeeScript 1.11.1

/*
    SimUrban Scene Object.
    Written by Bryce on 11/22/2016
    Refactored by Bryce on 12 - 18 - 2016.
    
    Purpose: This class organizes all of the structural layers in the game.
        It serves as the root of the scene graph for all rendering.
        and a hub for the communication between game systems.


    - This class has a reference to all of the layers.
    - Each layer has a reference to this scene object.
    - The scene can return lists of game elements such as cars, buildings, roads, etc.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.E_Scene = (function(superClass) {
    extend(E_Scene, superClass);

    function E_Scene(scene_width, scene_height) {
      var view;
      E_Scene.__super__.constructor.call(this, new THREE.Scene());
      view = this.getVisual();
      this._network = new TSAG.E_Network();
      view.add(this._network.getVisual());
      this._overlays = new TSAG.E_Overlays(this);
      view.add(this._overlays.getVisual());
      this._io_root = null;
    }

    E_Scene.prototype.setInputRoot = function(io_root) {
      var view;
      this._io_root = io_root;
      this._io_mouse_main = this._io_root.getMouseController();
      view = this.getVisual();
      this._ui = new TSAG.E_UI_Game(this);
      return view.add(this._ui.getVisual());
    };

    E_Scene.prototype.constructRandomBuildings = function() {
      var building, h, i, j, pos, rz, scale, w, x, y;
      this._building_visuals = new THREE.Object3D();
      this._building_visuals.name = "Building Visuals";
      view.add(this._building_visuals);
      this._buildings = [];
      this._scale = 40;
      this._padding = 30;
      for (i = j = 0; j < 10; i = ++j) {
        x = this._padding + Math.random() * (scene_width - this._padding * 2);
        y = this._padding + Math.random() * (scene_height - this._padding * 2);
        w = this._scale;
        h = this._scale;
        rz = Math.random() * Math.PI * 2;
        pos = new THREE.Vector3(x, y, 0);
        scale = new THREE.Vector3(w, h, 1);
        building = new TSAG.E_Building(pos, scale, rz);
        this._buildings.push(building);
        this._building_visuals.add(building.getVisual());
      }
    };

    E_Scene.prototype.getOverlays = function() {
      return this._overlays;
    };

    E_Scene.prototype.getUI = function() {
      return this._ui;
    };

    E_Scene.prototype.getNetwork = function() {
      return this._network;
    };

    E_Scene.prototype.getMeshFactory = function() {
      return TSAG.style.unit_meshes;
    };

    E_Scene.prototype.getBuildings = function() {
      return this._buildings;
    };

    E_Scene.prototype.getRoads = function() {
      return this._roads;
    };

    E_Scene.prototype.ui_message = function(str, params) {
      this._ui.message(str, params);
    };

    E_Scene.prototype.ui_flash = function() {
      this._ui.flash();
    };

    E_Scene.prototype.get_io_mouse = function() {
      return this._io_mouse_main;
    };

    return E_Scene;

  })(TSAG.E_Super);

}).call(this);
