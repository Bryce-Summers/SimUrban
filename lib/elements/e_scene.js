// Generated by CoffeeScript 1.11.1

/*
    SimUrban Scene Object.
    Written by Bryce on 11/22/2016
    Refactored by Bryce on 12 - 18 - 2016.
    
    Purpose: This class organizes all of the structural layers in the game.
        It serves as the root of the scene graph for all rendering.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.E_Scene = (function(superClass) {
    extend(E_Scene, superClass);

    function E_Scene(scene_width, scene_height) {
      var building, h, i, j, pos, rz, scale, view, w, x, y;
      E_Scene.__super__.constructor.call(this, new THREE.Scene());
      view = this.getVisual();
      this._AABB = null;
      this._network = new TSAG.E_Network();
      view.add(this._network.getVisual());
      this._overlays = new THREE.Object3D();
      this._overlays.name = "Overlays";
      view.add(this._overlays);
      this._buildings = new THREE.Object3D();
      this._buildings.name = "Buildings";
      view.add(this._buildings);
      this._scale = 40;
      this._padding = 30;
      for (i = j = 0; j < 10; i = ++j) {
        x = this._padding + Math.random() * (scene_width - this._padding * 2);
        y = this._padding + Math.random() * (scene_height - this._padding * 2);
        w = this._scale;
        h = this._scale;
        rz = Math.random() * Math.PI * 2;
        pos = new THREE.Vector3(x, y, 0);
        scale = new THREE.Vector3(w, h, 1);
        building = new TSAG.E_Building(pos, scale, rz);
        this._buildings.add(building.getVisual());
      }
      return;
    }

    E_Scene.prototype.addOverlayVisual = function(obj) {
      return this._overlays.add(obj);
    };

    E_Scene.prototype.removeOverlayVisual = function(obj) {
      return this._overlays.remove(obj);
    };

    E_Scene.prototype.getNetwork = function() {
      return this._network;
    };

    E_Scene.prototype.getMeshFactory = function() {
      return TSAG.style.unit_meshes;
    };

    E_Scene.prototype.getNetwork = function() {
      return this._network;
    };

    E_Scene.prototype.queryPoint = function(x, y) {
      var direction, origin, ray, results;
      origin = new THREE.Vector3(x, y, -10);
      direction = new THREE.Vector3(0, 0, 1);
      ray = new THREE.Ray(origin, direction);
      results = this._AABB.collision_query(ray);
      return results;
    };

    return E_Scene;

  })(TSAG.E_Super);

}).call(this);
