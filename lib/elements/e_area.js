// Generated by CoffeeScript 1.11.1

/*
 *
 * Area Element Class
 * 
 * Written by Bryce Summers on May.4.2017
 *
 * Purpose: This class represents an area.
 *          This area has a number of people who want to get to other areas.
 *          FIXME: I may remove this element of adapt it in future iterations after the IDM showcase.
 *
 * FIXME: Labeled city regions and areas representing faces may need to be decoupled.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TSAG.E_Area = (function(superClass) {
    extend(E_Area, superClass);

    function E_Area(polyline, label_str, url_to_stats_overlay) {
      var bounding_box, center_x, center_y, height, mesh, mesh_factory, view, width;
      E_Area.__super__.constructor.call(this);
      this.stats_overlay = TSAG.style.newSprite(url_to_stats_overlay, {
        x: 0,
        y: 0,
        w: 1200,
        h: 800
      });
      this.area = polyline;
      bounding_box = this.area.ensureBoundingBox();
      view = this.getVisual();
      mesh_factory = TSAG.style.unit_meshes;
      mesh = mesh_factory.newCircle({
        color: TSAG.style.c_normal
      });
      view.add(mesh);
      width = bounding_box.max.x - bounding_box.min.x;
      height = bounding_box.max.y - bounding_box.min.y;
      center_x = (bounding_box.max.x + bounding_box.min.x) / 2;
      center_y = (bounding_box.max.y + bounding_box.min.y) / 2;
      mesh.position.x = center_x;
      mesh.position.y = center_y;
      mesh.position.z = -.7;
      mesh.scale.x = width;
      mesh.scale.y = height;
      this.text_label = new THREE.Object3D();
      view.add(this.text_label);
      this.text_label.position.x = center_x;
      this.text_label.position.y = center_y;
      TSAG.style.newText({
        font: TSAG.style.font,
        height: 12,
        fill_color: 0xff000000,
        message: label_str,
        out: this.text_label,
        align_center: true
      });
    }

    E_Area.prototype.containsPoint = function(pt) {
      return this.area.containsPoint(pt);
    };

    E_Area.prototype.display_stats = function(view) {
      return view.add(this.stats_overlay);
    };

    E_Area.prototype.hide_stats = function(view) {
      return view.remove(this.stats_overlay);
    };

    return E_Area;

  })(TSAG.E_Super);

}).call(this);
